# Generic .travis.yml file for running continuous integration on Travis-CI with
# any ROS package.
#
# This installs ROS on a clean Travis-CI virtual machine, creates a ROS
# workspace, resolves all listed dependencies, and sets environment variables
# (setup.bash). Then, it compiles the entire ROS workspace (ensuring there are
# no compilation errors), and runs all the tests. If any of the compilation/test
# phases fail, the build is marked as a failure.
#
# We handle two types of package dependencies:
#   - packages (ros and otherwise) available through apt-get. These are installed
#     using rosdep, based on the information in the ROS package.xml.
#   - dependencies that must be checked out from source. These are handled by
#     'wstool', and should be listed in a file named dependencies.rosinstall.
#
# There are two variables you may want to change:
#   - ROS_DISTRO (default is indigo). Note that packages must be available for
#     ubuntu 14.04 trusty.
#   - ROSINSTALL_FILE (default is dependencies.rosinstall inside the repo
#     root). This should list all necessary repositories in wstool format (see
#     the ros wiki). If the file does not exists then nothing happens.
#
# See the README.md for more information.
#
# Author: Felix Duvallet <felixd@gmail.com>

# NOTE: The build lifecycle on Travis.ci is something like this:
#    before_install
#    install
#    before_script
#    script
#    after_success or after_failure
#    after_script
#    OPTIONAL before_deploy
#    OPTIONAL deploy
#    OPTIONAL after_deploy

################################################################################

# Use ubuntu trusty (14.04) with sudo privileges.
dist: trusty
sudo: required
language:
  - python
python:
  - 2.7
cache:
  - apt

# Configuration variables. All variables are global now, but this can be used to
# trigger a build matrix for different ROS distributions if desired.
env:
  global:
    - ROS_DISTRO=indigo
    - OS_DISTRO="`lsb_release -cs`"  # e.g. [precise|trusty|...]
    - SOURCE_PATH=$(pwd)
    - CATKIN_WS=~/catkin_ws

################################################################################

# Install system dependencies, namely a very barebones ROS setup.
before_install:
  - pip install -r requirements.txt
  - sudo sh -c "echo \"deb http://packages.ros.org/ros/ubuntu $OS_DISTRO main\" > /etc/apt/sources.list.d/ros-latest.list"
  - wget http://packages.ros.org/ros.key -O - | sudo apt-key add -
  - sudo apt-get update -qq
  - sudo apt-get install -y python-rosdep ros-$ROS_DISTRO-catkin
  - source /opt/ros/$ROS_DISTRO/setup.bash
  # Prepare rosdep to install dependencies.
  - sudo rosdep init
  - rosdep update

# Install all dependencies, using rosdep.
install:
  - rosdep install -y --from-paths $SOURCE_PATH --ignore-src --rosdistro $ROS_DISTRO

# Create a catkin workspace with the package under integration.
before_script:
  - mkdir -p $CATKIN_WS/src
  - cd $CATKIN_WS
  - catkin_init_workspace ./src/
  # Add the package under integration to the workspace using a symlink.
  - ln -s $SOURCE_PATH ./src/
  # Create the devel/setup.bash and source it to set the path variables.
  - catkin_make
  - source devel/setup.bash

# Compile and test.
script:
  - catkin_make run_tests  # This always returns 0
  - catkin_test_results # This will return non-zero if a test fails.
  # coverage
  - $CATKIN_WS/devel/env.sh nosetests --where=$SOURCE_PATH --with-coverage --cover-erase --cover-package=robopatrol

after_success:
  - coveralls
