#!/usr/bin/env python

import time
from datetime import datetime

from robopatrol.DAO.ConfigDBDao import ConfigDBDao
from robopatrol.Scheduler.RobopatrolScheduler import RobopatrolScheduler

#CONFIGURATION
poll_interval_sec = 5

######################################################################################################
#CREATE YOUR FUNCTIONS FOR YOUR SCHEDULED JOB
def my_job():
    print('Tick! The time is: %s' % datetime.now())


#SCHEDULER FUNCTION SECTION END
#######################################################################################################

######################################################################################################
#ADD YOUR JOB HERE.
job_listdict = [
    {
        "name": my_job,
        "description": "Testjob, which tests the scheduler. (Remove as soon as this script is productive)",
        "cron": "*/5 * * * * *"
    }#,
#    {
#        "name": my_function,
#        "description": "COPY ME ( I AM LE TEMPLATE)",
#        "cron": "* * * * * *"
#    }
]
# END JOB SECTION
######################################################################################################

def get_dict_job_by_name(jobs_dict, job_name):
    return next((job for job in jobs_dict if job['name'] == job_name), None)


def terminate(scheduler):
    scheduler.shutdown()


#Initializing stuff
scheduler = RobopatrolScheduler(job_listdict)
configDBDao = ConfigDBDao()
posted_jobs = configDBDao.post_jobs(scheduler.get_jobs_json())
scheduler.start()
scheduler.pause_all_jobs()

try:
    while True:
        time.sleep(poll_interval_sec)

        #Preconditions
        JData = configDBDao.get_jobs()
        if JData is None:
            scheduler.pause_all_jobs()
            continue

        #Pause job if not in configuration db. Reschedule job if interval changed.
        for job in scheduler.get_jobs():
            job_dict = get_dict_job_by_name(JData, job.name)
            job_dict_actual = get_dict_job_by_name(scheduler.get_jobs_json(), job.name)

            #Process actions
            if job_dict is None:
                job.pause()
            else:
                if job_dict_actual['cron'] != job_dict['cron'] or job.next_run_time is None:
                    print "modifying " + job_dict_actual['cron'] + " to " + job_dict['cron']
                    job_dict_actual['cron'] = job_dict['cron']
                    scheduler.reschedule_by_cron(job, job_dict['cron'])

except (KeyboardInterrupt, SystemExit):
    # Not strictly necessary if daemonic mode is enabled but should be done if possible
    terminate(scheduler)

